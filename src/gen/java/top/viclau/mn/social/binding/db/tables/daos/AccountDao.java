/*
 * This file is generated by jOOQ.
 */
package top.viclau.mn.social.binding.db.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import top.viclau.mn.social.binding.db.enums.AccountStatus;
import top.viclau.mn.social.binding.db.enums.AccountType;
import top.viclau.mn.social.binding.db.tables.Account;
import top.viclau.mn.social.binding.db.tables.records.AccountRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountDao extends DAOImpl<AccountRecord, top.viclau.mn.social.binding.db.tables.pojos.Account, Long> {

    /**
     * Create a new AccountDao without any configuration
     */
    public AccountDao() {
        super(Account.ACCOUNT, top.viclau.mn.social.binding.db.tables.pojos.Account.class);
    }

    /**
     * Create a new AccountDao with an attached configuration
     */
    public AccountDao(Configuration configuration) {
        super(Account.ACCOUNT, top.viclau.mn.social.binding.db.tables.pojos.Account.class, configuration);
    }

    @Override
    public Long getId(top.viclau.mn.social.binding.db.tables.pojos.Account object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Account.ACCOUNT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchById(Long... values) {
        return fetch(Account.ACCOUNT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public top.viclau.mn.social.binding.db.tables.pojos.Account fetchOneById(Long value) {
        return fetchOne(Account.ACCOUNT.ID, value);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchRangeOfType(AccountType lowerInclusive, AccountType upperInclusive) {
        return fetchRange(Account.ACCOUNT.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchByType(AccountType... values) {
        return fetch(Account.ACCOUNT.TYPE, values);
    }

    /**
     * Fetch records that have <code>ext_identifier BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchRangeOfExtIdentifier(String lowerInclusive, String upperInclusive) {
        return fetchRange(Account.ACCOUNT.EXT_IDENTIFIER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ext_identifier IN (values)</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchByExtIdentifier(String... values) {
        return fetch(Account.ACCOUNT.EXT_IDENTIFIER, values);
    }

    /**
     * Fetch records that have <code>ext_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchRangeOfExtName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Account.ACCOUNT.EXT_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ext_name IN (values)</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchByExtName(String... values) {
        return fetch(Account.ACCOUNT.EXT_NAME, values);
    }

    /**
     * Fetch records that have <code>avatar BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchRangeOfAvatar(String lowerInclusive, String upperInclusive) {
        return fetchRange(Account.ACCOUNT.AVATAR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>avatar IN (values)</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchByAvatar(String... values) {
        return fetch(Account.ACCOUNT.AVATAR, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchRangeOfStatus(AccountStatus lowerInclusive, AccountStatus upperInclusive) {
        return fetchRange(Account.ACCOUNT.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchByStatus(AccountStatus... values) {
        return fetch(Account.ACCOUNT.STATUS, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Account.ACCOUNT.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Account.ACCOUNT.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Account.ACCOUNT.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<top.viclau.mn.social.binding.db.tables.pojos.Account> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Account.ACCOUNT.UPDATED_AT, values);
    }
}
