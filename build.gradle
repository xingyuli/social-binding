import groovy.xml.MarkupBuilder
import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.Configuration
import javax.xml.bind.JAXB

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
        classpath "org.jooq:jooq-codegen:${jooqVersion}"
        classpath "mysql:mysql-connector-java:${mysqlConnectorJavaVersion}"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "org.jetbrains.kotlin.kapt" version "1.3.72"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "application"
    id "com.google.cloud.tools.jib" version "2.1.0"
}

version "0.1.3-jre"
group "top.viclau.mn.social.binding"

repositories {
    maven { url "https://maven.aliyun.com/repository/public" }
    // mavenCentral()
    // maven { url "https://jcenter.bintray.com" }
}

sourceSets {
    main {
        java {
            srcDirs += 'src/gen/java'
        }
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "io.micronaut:micronaut-runtime"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "com.github.binarywang:weixin-java-mp:${weixinJavaMpVersion}"
    implementation "io.micronaut.xml:micronaut-jackson-xml"
    implementation 'io.micronaut.configuration:micronaut-flyway'
    implementation 'io.micronaut.configuration:micronaut-jooq'
    implementation "io.micronaut.kubernetes:micronaut-kubernetes-discovery-client"
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    runtimeOnly "io.micronaut.configuration:micronaut-jdbc-hikari"
    runtimeOnly "mysql:mysql-connector-java:${mysqlConnectorJavaVersion}"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "io.micronaut.test:micronaut-test-kotlintest"
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.3.2"
}

test.classpath += configurations.developmentOnly

mainClassName = "top.viclau.mn.social.binding.Application"
jib {
    from.image = 'docker://adoptopenjdk/openjdk11-openj9:jre-11.0.11_9_openj9-0.26.0-alpine'
    to.image = "registry.cn-beijing.aliyuncs.com/viclau/social-binding:${version}"
}

test {
    useJUnitPlatform()
}

allOpen {
	annotation("io.micronaut.aop.Around")
}

compileKotlin {
	kotlinOptions {
	    jvmTarget = '11'
	    //Will retain parameter names for Java reflection
	    javaParameters = true 
	}
}

compileTestKotlin {
	kotlinOptions {
	    jvmTarget = '11'
	    javaParameters = true 
	}
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

task jooqCodegen {
    doLast {
        // Use your favourite XML builder to construct the code generation configuration file
        // ----------------------------------------------------------------------------------
        def writer = new StringWriter()
        def xml = new MarkupBuilder(writer)
                .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.12.0.xsd') {
                    jdbc() {
                        driver('com.mysql.cj.jdbc.Driver')
                        url('jdbc:mysql://localhost:3306/social-binding?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai')
                        user('root')
                        password('root')
                    }
                    generator() {
                        database() {
                            inputSchema('social-binding')
                            outputSchemaToDefault('true')
                            includes('.*')
                            excludes('flyway_schema_history')
                        }
                        generate() {
                            generatedAnnotation("false")

                            interfaces("true")
                            javaTimeTypes("true")

                            pojos("true")
                            pojosEqualsAndHashCode("true")
                            pojosToString("true")

                            daos("true")
                        }
                        target() {
                            packageName('top.viclau.mn.social.binding.db')
                            directory(projectDir.path + '/src/gen/java')
                        }
                    }
                }
        // Run the code generator
        // ----------------------
        GenerationTool.generate(
                JAXB.unmarshal(new StringReader(writer.toString()), Configuration.class)
        )
    }
}
